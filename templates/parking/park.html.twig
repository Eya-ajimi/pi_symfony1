{# templates/parking/park.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Smart Parking | InnoMall{% endblock %}

{% block stylesheets %}

    <link rel="stylesheet" href="{{ asset('css/parking.css') }}">
{% endblock %}

{% block content %}
<div class="parking-dashboard">
    <div class="dashboard-header">
        <div class="header-content">
            <h1><i class="fas fa-parking"></i> Smart Parking</h1>
            <p class="subtitle">Real-time parking management system</p>
        </div>
    </div>
    
    <div class="dashboard-body">
        <!-- Control Panel -->
        <div class="control-section">
            <div class="control-panel glass-panel">
                <div class="control-options">
                    <div class="floor-selector">
                        <label for="floorSelect">Floor</label>
                        <select id="floorSelect" class="modern-select" onchange="window.location.href='/parking?floor='+this.value">
                            <option value="1" {{ floor == 1 ? 'selected' : '' }}>Floor 1</option>
                            <option value="2" {{ floor == 2 ? 'selected' : '' }}>Floor 2</option>
                            <option value="3" {{ floor == 3 ? 'selected' : '' }}>Floor 3</option>
                        </select>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <a href="{{ path('app_parking_my_reservations') }}" class="action-btn secondary-btn">
                        <i class="fas fa-eye"></i> <span>My Reservations</span>
                    </a>
                    <a href="{{ path('app_parking_find_my_car_form') }}" class="action-btn secondary-btn">
                        <i class="fas fa-search-location"></i> {# Using a search/location icon #}
                        <span>Find My Car</span>
                    </a>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="stats-row">
                <div class="stat-card glass-panel">
                    <div class="stat-icon"><i class="fas fa-car-side"></i></div>
                    <div class="stat-content">
                        <p class="stat-value">{{ available_spots_count }}</p>
                        <p class="stat-label">Available Spots</p>
                    </div>
                </div>
                
                <div class="stat-card glass-panel">
                    <div class="stat-icon"><i class="fas fa-chart-pie"></i></div>
                    <div class="stat-content">
                        <p class="stat-value">{{ occupancy_rate }}%</p>
                        <p class="stat-label">Occupancy Rate</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Parking Map -->
        <div class="parking-map glass-panel">
            <div class="map-header">
                <h2>Parking Map - Level {{ floor }}</h2>
                
                <div class="legend">
    <div class="legend-item">
        <div class="legend-color green"></div>
        <span>Free</span>
    </div>
    <div class="legend-item">
        <div class="legend-color red"></div>
        <span>Taken</span>
    </div>
    <div class="legend-item">
        <div class="legend-color blue"></div>
        <span>Reserved</span>
    </div>
</div>
            </div>
            
            <!-- Unified Parking Area -->
            <div class="parking-area">
    {% for spot in parking_spots %}
        {% if spot.statut == 'free' %}
            <a href="{{ path('app_parking_reserve', {'id': spot.id}) }}" class="parking-spot green">
        {% elseif spot.statut == 'reserved' %}
            <div class="parking-spot blue">
        {% else %}
            <div class="parking-spot red">
        {% endif %}
                <div class="spot-number">{{ spot.zone }}{{ spot.id }}</div>
                <div class="spot-type">Standard</div>
                {% if spot.statut == 'taken' %}
    <i class="fas fa-car-alt vehicle-icon"></i>
{% elseif spot.statut == 'reserved' %}
    <i class="fas fa-calendar-check vehicle-icon"></i>
{% else %}
    <i class="fas fa-square-parking vehicle-icon"></i>
{% endif %}
        {% if spot.statut == 'free' %}
            </a>
        {% else %}
            </div>
        {% endif %}
    {% else %}
        <div class="no-spots">No parking spots found for this floor</div>
    {% endfor %}
</div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const floorSelect = document.getElementById('floorSelect');
            let currentFloor = floorSelect.value;
            
            // Function to update parking spots
            function updateParkingSpots(data) {
                data.spots.forEach(function(spot) {
                    const spotElements = document.querySelectorAll('.spot-number');
                    spotElements.forEach(element => {
                        if (element.textContent === spot.zone + spot.id) {
    const parentDiv = element.closest('.parking-spot');
    
    // Remove all status classes
    parentDiv.classList.remove('green', 'red', 'blue');
    
    // Add appropriate class based on status
    if (spot.status === 'free') {
        parentDiv.classList.add('green');
        // Convert back to link if it's free
        if (parentDiv.tagName !== 'A') {
            const newLink = document.createElement('a');
            newLink.href = `/parking/reserve/${spot.id}`;
            newLink.className = parentDiv.className;
            newLink.innerHTML = parentDiv.innerHTML;
            parentDiv.parentNode.replaceChild(newLink, parentDiv);
        }
    } else if (spot.status === 'reserved') {
        parentDiv.classList.add('blue');
        // Convert to div if it's reserved
        if (parentDiv.tagName === 'A') {
            const newDiv = document.createElement('div');
            newDiv.className = parentDiv.className;
            newDiv.innerHTML = parentDiv.innerHTML;
            parentDiv.parentNode.replaceChild(newDiv, parentDiv);
        }
    } else {
        parentDiv.classList.add('red');
        // Convert to div if it's taken
        if (parentDiv.tagName === 'A') {
            const newDiv = document.createElement('div');
            newDiv.className = parentDiv.className;
            newDiv.innerHTML = parentDiv.innerHTML;
            parentDiv.parentNode.replaceChild(newDiv, parentDiv);
        }
    }
}
                    });
                });
                
                // Update stats display
                if (data.stats) {
                    const availableElement = document.querySelector('.stat-value');
                    if (availableElement) {
                        availableElement.textContent = data.stats.available;
                    }
                    
                    const occupancyElement = document.querySelector('.stat-value:nth-of-type(2)');
                    if (occupancyElement) {
                        occupancyElement.textContent = data.stats.occupancy_rate + '%';
                    }
                }
            }

            // Function to fetch updates
            function fetchUpdates() {
                fetch(`/parking/mqtt-updates?floor=${currentFloor}`)
                    .then(response => response.json())
                    .then(updateParkingSpots)
                    .catch(error => console.error('Error fetching updates:', error));
            }

            // Start polling (every 2 seconds)
            setInterval(fetchUpdates, 2000);
            
            // Handle floor changes
            floorSelect.addEventListener('change', function() {
                currentFloor = this.value;
                fetchUpdates(); // Immediately fetch new floor data
            });
            
            // Initial fetch
            fetchUpdates();
        });
    </script>
{% endblock %}